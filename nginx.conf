events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Enable logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;
    
    # Define upstream for backend API
    upstream backend {
        server 127.0.0.1:3001;
    }

    server {
        # Use $PORT environment variable for Railway, fallback to 3000
        listen ${PORT:-3000};
        server_name localhost;
        root /app/dist;
        index index.html;
        
        # Serve static files
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # Proxy API requests to backend
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Add WebSocket support (Necessary for version 0.5.0 and up)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Additional headers for better proxying
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # (Optional) Disable proxy buffering for better streaming response from models
            proxy_buffering off;
            
            # Proxy timeouts
            proxy_connect_timeout 180s;
            proxy_send_timeout 180s;
            proxy_read_timeout 180s;
            
            # Handle proxy errors
            proxy_intercept_errors off;
            
            # Logging
            access_log /var/log/nginx/api_access.log;
            error_log /var/log/nginx/api_error.log;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://backend;
            proxy_intercept_errors on;
            error_page 502 503 504 = @health_fallback;
        }
        
        location @health_fallback {
            add_header Content-Type application/json;
            return 200 '{"status":"OK","nginx":"running","backend":"unavailable"}';
        }
    }
}